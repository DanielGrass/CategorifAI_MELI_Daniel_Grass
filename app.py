import streamlit as st
from modules.theme_toggle import initialize_theme, toggle_theme, apply_styles
from modules.description_dataset import description_dataset, null_analysis, plot_categorical_distribution_with_pareto, plot_distribution_with_outlier_removal, analysis_datetime_variables, analysis_withdrawal_deposit
from modules.transactions_details_preprocesing import transactions_details_cleaning
from modules.feature_engineering import feature_engineering
from data.data_loader import load_local_parquet
import pandas as pd
import numpy as np
import plotly.express as px

# Inicializar el estado del tema
initialize_theme()

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="CategorifAI", page_icon=":bar_chart:", layout="wide")

# Aplicar los estilos seg√∫n el modo seleccionado
apply_styles()

# URL del logo
logo_url = "https://http2.mlstatic.com/frontend-assets/ml-web-navigation/ui-navigation/6.6.73/mercadolibre/logo_large_25years@2x.png?width=300"

# Variables para la selecci√≥n de secciones
if 'selected_main' not in st.session_state:
    st.session_state.selected_main = "Requerido"
    
# Barra lateral con el logo y men√∫
with st.sidebar:
    st.image(logo_url, use_column_width=True)  # Muestra el logo desde la URL
    st.title("Men√∫ Principal")
   
    # Botones principales para secciones
    if st.button("Requerido"):
        st.session_state.selected_main = "Requerido"

    if st.button("Deseable"):
        st.session_state.selected_main = "Deseable"

    if st.button("Bonus"):
        st.session_state.selected_main = "Bonus"
    
    # Bot√≥n para cambiar entre modo claro y oscuro con √≠conos de sol y luna
    theme_button = "üåô" if not st.session_state.dark_mode else "‚òÄÔ∏è"
    st.button(theme_button, on_click=toggle_theme)

# Men√∫ horizontal a la derecha basado en la selecci√≥n
st.title("Data Science Technical Challenge - CategorifAI")
st.title("Take Home: Financial Transactions")
st.subheader("Presentado por: Daniel Grass")

# Cargael archivo .parquet usando la funci√≥n cacheada
df = load_local_parquet()


if st.session_state.selected_main:
    # Mostrar un men√∫ horizontal seg√∫n la selecci√≥n del bot√≥n principal
    if st.session_state.selected_main == "Requerido":
        st.header("Tareas requeridas")
        st.write("**`Data QA`**: Se debe chequear la calidad del dataset para hacer una evaluaci√≥n de qu√© tan apropiados son los datos para tareas de Data Science. Proponga un conjunto de correcciones en los datos de ser necesario.")
        st.write("**`Reporting`**: Documente los resultados e insights obtenidos durante la exploraci√≥n y describa conclusiones desde una perspectiva de negocio, soportado por gr√°ficos / tablas / m√©tricas.")
        st.write("**`Machine Learning`**: Describa las posibles tareas de Machine Learning que podr√≠an realizarse desde el dataset dado, que podr√≠an ser valiosas en el dominio dado (s√≥lo explicar, **no entrenar un modelo**)")
        
       

        # Mostrar la Descripci√≥n de las Columnas del Dataset
        st.header("Descripci√≥n de las Columnas del Dataset")
        description_dataset()
        
        ##################################################################################
        ###############1. Imprimir los datos originales del archivo Parquet proporcionado.
        ##################################################################################
        st.header("1.1. Imprimir los datos originales del archivo Parquet proporcionado.")
        if df is not None:
            st.write(df)  # Muestra el DataFrame en Streamlit

        ##################################################################################
        ###############2. An√°lisis de tipos de datos y valores nulos
        ##################################################################################
        st.header("1.2. An√°lisis de tipos de datos y valores nulos")        
        null_analysis(df)

        ##################################################################################
        ###############3. An√°lisis Categ√≥rico:
        ##################################################################################
        st.header("1.3. An√°lisis Categ√≥rico:")
        
        # An√°lisis de la columna `category`
        st.subheader("Distribuci√≥n de `category`")
        plot_categorical_distribution_with_pareto('category', df, color='skyblue')

        # An√°lisis de la columna `city`
        st.subheader("Distribuci√≥n de `city`")
        plot_categorical_distribution_with_pareto('city', df, color='orange')

        # An√°lisis de la columna `device`
        st.subheader("Distribuci√≥n de `device`")
        plot_categorical_distribution_with_pareto('device', df, color='purple')

        # An√°lisis de la columna `transaction_details`
        st.subheader("Distribuci√≥n de `account_id`")
        plot_categorical_distribution_with_pareto('account_id', df, color='pink')
       
        st.subheader("Conclusiones del An√°lisis Categ√≥rico:")
        conclusiones_categorico = """       

        1. **Distribuci√≥n de `Category`**:
        - El an√°lisis de la variable `Category` revela que una gran mayor√≠a de las transacciones (96.53%) se concentran en solo cuatro categor√≠as: **Miscellaneous**, **Transfer**, **Investment**, y **Subscriptions**. Esto sugiere que la actividad financiera de los usuarios est√° altamente centralizada en estas √°reas, lo que podr√≠a indicar patrones espec√≠ficos de uso o falta de diversificaci√≥n en las clasificaciones de las transacciones. Es crucial explorar estas categor√≠as m√°s a fondo para identificar si esta centralizaci√≥n responde a necesidades espec√≠ficas de los usuarios o si podr√≠a beneficiarse de una reclasificaci√≥n m√°s detallada.

        2. **Distribuci√≥n de `City` y `Device`**:
        - Las variables `City` y `Device` presentan una distribuci√≥n m√°s uniforme, donde cada categor√≠a muestra una participaci√≥n similar. Esto indica que no hay una fuerte dependencia de la transacci√≥n en funci√≥n de la ubicaci√≥n geogr√°fica o el tipo de dispositivo utilizado. Esta distribuci√≥n homog√©nea sugiere que las transacciones se distribuyen equitativamente entre las ciudades y los dispositivos, reflejando un comportamiento de usuario relativamente constante sin sesgos significativos hacia un tipo de dispositivo o una ciudad espec√≠fica. Este patr√≥n uniforme podr√≠a implicar que no hay una necesidad urgente de segmentar estrategias por ubicaci√≥n o tipo de dispositivo en este momento.
        
        3. **Distribuci√≥n de `account_id`**:
        -  Un peque√±o grupo de cuentas domina la mayor√≠a de las transacciones. Las primeras dos cuentas concentran una gran proporci√≥n de la actividad total (67.65%), sugiriendo usuarios muy activos. Esto ofrece una oportunidad para analizar el comportamiento de los usuarios, identificando patrones que podr√≠an guiar estrategias de segmentaci√≥n y retenci√≥n como modelos RFM.
        
        4. **Distribuci√≥n de `transaction_details`**:
        -  La variable transaction_details presenta una alta cardinalidad, lo que significa que contiene un gran n√∫mero de valores √∫nicos que dificulta su an√°lisis directo y la identificaci√≥n de patrones claros. se propone realizar una reclasificaci√≥n de transaction_details agrupando los registros por palabras clave o frases similares. Esto se puede lograr mediante t√©cnicas de procesamiento de lenguaje natural (NLP), como la identificaci√≥n de palabras clave, la eliminaci√≥n de stopwords, y el uso de algoritmos de similaridad textual como fuzzy matching o TF-IDF. Estas t√©cnicas permitir√°n agrupar transacciones en categor√≠as m√°s manejables y coherentes, como "pagos", "transferencias", "compras", entre otras, facilitando su an√°lisis.
        """

        # Mostrar el texto en Streamlit
        st.markdown(conclusiones_categorico)
        
        # Filtrar los datos para dep√≥sitos y retiros
        deposit_data = df[df['deposit_amt'].notnull()]
        withdrawal_data = df[df['withdrawal_amt'].notnull()]

        # Crear gr√°ficos separados para dep√≥sitos y retiros

        # Gr√°fico para Dep√≥sitos
        st.subheader("Distribuci√≥n de `category` para depositos")
        plot_categorical_distribution_with_pareto(
            column_name='category',
            data=deposit_data,
            color='green'
        )

        # Gr√°fico para Retiros
        st.subheader("Distribuci√≥n de `category` para retiros")
        plot_categorical_distribution_with_pareto(
            column_name='category',
            data=withdrawal_data,
            color='blue'
        )
        ############################################################################################
        ###############4. An√°lisis variables continuas (Distribuciones y tratamiento de anomalos):
        ############################################################################################
        st.header("1.4. An√°lisis variables continuas (Distribuciones y tratamiento de anomalos:")

        numerical_columns = ['withdrawal_amt', 'deposit_amt', 'balance_amt']
        # Visualizaci√≥n de cada variable continua antes y despu√©s de remover outliers
        for col in numerical_columns:
            plot_distribution_with_outlier_removal(col, df)
        
    

        conclusiones_variables_continuas = """
                        ### Conclusiones de An√°lisis variables continuas (Distribuciones y tratamiento de anomalos

                        **An√°lisis de `withdrawal_amt`**:

                        - El histograma de withdrawal_amt muestra que aproximadamente el 80% de los registros se encuentran en el rango de [0 - 10M]. Esto sugiere una alta concentraci√≥n de transacciones de retiro en valores bajos a moderados, lo cual es t√≠pico en escenarios donde la mayor√≠a de los usuarios realizan transacciones peque√±as o medianas.
                        - Se detecta un valor m√°ximo significativo de 459M, indicando la presencia de outliers que pueden distorsionar la interpretaci√≥n de los datos y afectar los an√°lisis estad√≠sticos.
                        - Despu√©s de eliminar los outliers utilizando el rango intercuart√≠lico (IQR), los datos se ajustan al rango [0 - 12M], con una concentraci√≥n predominante en el intervalo [0 - 250k]. En este rango se encuentran 30,958 de los 53,549 registros totales, lo que refuerza que la mayor√≠a de las transacciones est√°n en valores relativamente bajos.
                        - Se utiliz√≥ Fitter para identificar la mejor distribuci√≥n te√≥rica que se ajusta a los datos sin outliers, resultando en la distribuci√≥n Johnson SB como la m√°s adecuada. Esta distribuci√≥n es conocida por su flexibilidad en modelar datos asim√©tricos y con colas largas.
                        - Es crucial realizar pruebas de hip√≥tesis, como la de Kolmogorov-Smirnov, para validar si la distribuci√≥n ajustada se adapta adecuadamente a los datos. Este paso permitir√° confirmar si el modelo te√≥rico es estad√≠sticamente significativo o si se requiere un ajuste adicional.
                        
                        **An√°lisis de `deposit_amt`**:

                        - El histograma de deposit_amt muestra que aproximadamente el 81% de los registros se concentran en el rango [0 - 10M]. Al igual que en withdrawal_amt, esto sugiere que la mayor√≠a de las transacciones de dep√≥sito son peque√±as, con una alta frecuencia en los valores bajos.
                        - Al eliminar los outliers mediante el IQR, los datos se ajustan al rango [0 - 11.7M], con una concentraci√≥n notable en el rango [0 - 250k]. Este grupo comprende 26,146 de los 62,652 registros, evidenciando que las transacciones m√°s frecuentes son de montos menores.
                        - El an√°lisis con Fitter identific√≥ que la Lognormal es la distribuci√≥n que mejor se ajusta a los datos sin outliers. Esta distribuci√≥n es com√∫n en datos financieros donde los valores son positivos y presentan una asimetr√≠a hacia la derecha, como es el caso de las transacciones monetarias.
                        - Al igual que con withdrawal_amt, es fundamental validar el ajuste con pruebas de hip√≥tesis como Kolmogorov-Smirnov para asegurar que la Lognormal representa adecuadamente los datos y no se deben considerar otras distribuciones.

                       **An√°lisis de `balance_amt`**:

                        - El an√°lisis del histograma de balance_amt revela que aproximadamente el 97.5% de los registros tienen un balance negativo, mientras que solo el 2.5% de los registros muestran un balance positivo. Esta distribuci√≥n indica que la mayor√≠a de las cuentas est√°n en d√©ficit, lo cual podr√≠a reflejar un comportamiento com√∫n de los usuarios o posibles inconsistencias en los datos de las transacciones.
                        - Adicionalmente, se identific√≥ que √∫nicamente 2 usuarios presentan balances positivos en sus cuentas, lo que sugiere que la situaci√≥n financiera general de los usuarios es predominantemente negativa.
                        - Es recomendable ajustar el formato de las fechas en value_date y date para incluir horas y minutos. Esto permitir√° un an√°lisis m√°s detallado de la cronolog√≠a de las transacciones y una posible reconstrucci√≥n precisa de los balances.

                        **Segregaci√≥n por Segmentos**:

                        - Se recomienda evaluar la posibilidad de segmentar los datos por categor√≠as adicionales, como tipo de cliente, periodo o monto. Esto permitir√≠a identificar patrones m√°s espec√≠ficos que podr√≠an mejorar la toma de decisiones basada en los datos.
                        """
        ## Validar comportamiento balance_amt
        # Mensaje para la cantidad de registros con balance menor a 0
        total_negative_balances = df["balance_amt"][df["balance_amt"] < 0].count()
        percentage_negative_balances = np.round((total_negative_balances / df["balance_amt"].count()) * 100, 2)
        text_warning_balance_amt = (
            f"‚ö†Ô∏è **Cantidad de registros con balance negativo:** {total_negative_balances} registros, "
            f"representando el {percentage_negative_balances}% del total."
        )
        st.error(text_warning_balance_amt)

        # Mensaje para la cantidad de usuarios con balance menor a 0
        total_negative_accounts = df["account_id"][df["balance_amt"] < 0].nunique()
        percentage_negative_accounts = np.round((total_negative_accounts / df["account_id"].nunique()) * 100, 2)
        text_warning_account_id = (
            f"‚ö†Ô∏è **Cantidad de usuarios con balance negativo:** {total_negative_accounts} usuarios, "
            f"representando el {percentage_negative_accounts}% de todos los usuarios."
        )
        st.error(text_warning_account_id)

        # Mostrar las conclusiones en Streamlit
        st.markdown(conclusiones_variables_continuas)

                     
        ############################################################################################
        ###############5. An√°lisis de Fechas de Transacci√≥n y Finalizaci√≥n:
        ############################################################################################
        st.header("1.5. An√°lisis de Fechas de Transacci√≥n y Finalizaci√≥n")
    
        analysis_datetime_variables(df)
        analysis_withdrawal_deposit(df)
        conclusiones_fechas_transaccion = """
        ### Conclusiones de An√°lisis de Fechas de Transacci√≥n y Finalizaci√≥n

        **`An√°lisis de Conteo Total de Transacciones Diarias`**:
        - La gr√°fica muestra una **tendencia general de aumento** en la **cantidad de transacciones diarias** a lo largo del tiempo, especialmente a partir de **mediados de 2016**. Este crecimiento podr√≠a indicar un **incremento en la actividad de los usuarios** o en la **adopci√≥n de los servicios** a lo largo del periodo analizado.
        - Se observan varios **picos pronunciados** en la cantidad de transacciones, especialmente entre **2017 y 2018**. Estos picos podr√≠an estar asociados a **eventos espec√≠ficos, promociones, campa√±as comerciales**, o **comportamientos an√≥malos** que podr√≠an requerir un **an√°lisis adicional** para identificar sus causas.
        - Desde **2015 hasta mediados de 2016**, la actividad de transacciones parece **m√°s estable** y con un **volumen relativamente bajo**, lo que podr√≠a reflejar una **etapa temprana o m√°s controlada** del sistema.
        - Se recomienda realizar un **an√°lisis de causalidad** para identificar si ciertos **eventos, pol√≠ticas o promociones** est√°n directamente relacionados con los **aumentos o disminuciones** en la actividad de las transacciones.
        - Los **account_ids '409000438620' y '1196428'** son los que parecen tener **m√°s picos an√≥malos**.

        **`An√°lisis de Tendencia Diaria de Dep√≥sitos y Retiros con Indicadores de Promedio`**:
        - La gr√°fica muestra que el **promedio diario de retiros (withdrawal_amt)** es de **185.7B**, mientras que el **promedio diario de dep√≥sitos (deposit_amt)** es de **184.3B**. Esta diferencia indica que, en general, los **retiros superan a los dep√≥sitos**, lo cual es un factor clave que podr√≠a estar contribuyendo a los **balances negativos** observados en las cuentas. Este comportamiento sugiere que la **salida de fondos es m√°s alta que la entrada**.
        """

        # Mostrar las conclusiones en Streamlit
        st.markdown(conclusiones_fechas_transaccion)

        ############################################################################################
        ###############6. Tareas de Machine Learning Propuestas:
        ############################################################################################
        st.header("1.6. Tareas de Machine Learning Propuestas")
        tareas_ml_propuestas = """
                        1. **`Modelo de Clasificaci√≥n para la Segmentaci√≥n de Clientes`**: Segmentar a los usuarios en grupos con comportamientos financieros similares (ej. ahorradores, gastadores, deudores), permitiendo personalizar ofertas y servicios, optimizando la estrategia de retenci√≥n y satisfacci√≥n del cliente. **Modelos Sugeridos**: Algoritmos de clustering como K-Means o DBSCAN, o clasificaci√≥n supervisada utilizando Random Forest.

                        2. **`Modelos Predictivos de Riesgo de Cr√©dito`**: Predecir el riesgo de que un cliente incurra en un saldo negativo o en un incumplimiento de pagos futuros, ayudando a implementar medidas preventivas como alertas de balance bajo, l√≠mites de retiro, o sugerencias de ahorro. **Modelos Sugeridos**: Regresi√≥n log√≠stica o modelos de redes neuronales.

                        3. **`An√°lisis de Anomal√≠as para Detecci√≥n de Fraudes`**: Detectar patrones de transacciones at√≠picas que podr√≠an indicar fraudes o actividades sospechosas, mejorando la seguridad financiera y reduciendo p√©rdidas asociadas a actividades fraudulentas. **Modelos Sugeridos**: Isolation Forest o t√©cnicas de an√°lisis de series temporales como Prophet.

                        4. **`Predicci√≥n de Categor√≠as de Transacciones`**: Automatizar la clasificaci√≥n de las transacciones en categor√≠as espec√≠ficas utilizando NLP (Procesamiento de Lenguaje Natural), mejorando la exactitud de la categorizaci√≥n de gastos e ingresos y permitiendo un an√°lisis financiero m√°s detallado. **Modelos Sugeridos**: Modelos de clasificaci√≥n basados en NLP.

                        """
        # Mostrar las conclusiones en Streamlit
        st.markdown(tareas_ml_propuestas)
        
    elif st.session_state.selected_main == "Deseable":
        st.header("Tareas deseadas:")
        st.write("**`Versionado de C√≥digo`**: Versionado de c√≥digo con Git (incluso puede publicarse en tu cuenta personal de GitHub).")        
        st.write("**`Feature Engineering`**: Indicar y calcular posibles candidatos de features que podr√≠an utilizarse tanto columnas originales y transformaciones.")
        st.write("**`Modelo Predictivo`**: Realice un modelo predictivo.")
        st.write("**`Mostrar Skills en Python`**: Teniendo buenas pr√°cticas en la estructura del c√≥digo y la documentaci√≥n.")        
        st.write("**`Casos de Uso`**: Describir posibles casos de uso a tratar con este dataset que podr√≠an agregar valor al negocio dado, indicando m√©todos, t√©cnicas, y algoritmos por cada uno de ellos, as√≠ como justificando las decisiones tomadas.")
        st.write("**`M√©tricas`**: Definir y calcular las m√©tricas que considere m√°s relevantes para la problem√°tica propuesta.")
        st.header("2.1. Feature Engineering")
        st.subheader("2.1.1 Limpiar el campo `transaction_details` para operaciones de Retiro(withdrawal)")
        df_cleaned = transactions_details_cleaning(df)

        st.subheader("2.1.2 Preparaci√≥n de los datos de entrenamiento")
        feature_engineering(df_cleaned)



        st.header("2.2 Modelo Predictivo")
        st.header("2.3 M√©tricas")
        st.header("2.4 Casos de Uso")
        st.header("2.5 Versionado de C√≥digo")
        st.markdown(
            """
            <a href="https://github.com/DanielGrass/CategorifAI_MELI_Daniel_Grass" target="_blank">
                <img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" alt="GitHub" width="20"/>
                GitHub - CategorifAI_MELI_Daniel_Grass
            </a>
            """,
            unsafe_allow_html=True
        )
        st.header("2.6 Mostrar Skills en Python")
        st.markdown(
            """
            1. **Organizaci√≥n del C√≥digo**: El c√≥digo est√° estructurado en m√≥dulos claros y separados, lo que facilita la comprensi√≥n, el mantenimiento y la escalabilidad del proyecto. Se siguen convenciones de nombres y se utiliza la modularidad para organizar funciones y componentes de manera eficiente.

            2. **Uso de Funciones y Modularizaci√≥n**: Se emplea una buena pr√°ctica de definir funciones para tareas repetitivas, minimizando la redundancia y mejorando la legibilidad del c√≥digo. Las funciones se han agrupado l√≥gicamente en m√≥dulos como `theme_toggle.py`, `description_dataset.py`, y `data_loader.py`, siguiendo un enfoque modular que facilita la navegaci√≥n y el mantenimiento del c√≥digo.

            3. **Documentaci√≥n y Comentarios Claros**: El c√≥digo contiene comentarios que explican secciones clave, ayudando a otros desarrolladores a comprender el flujo y la l√≥gica implementada. Adem√°s, se proporciona un archivo `README.md` detallado en el repositorio [CategorifAI_MELI_Daniel_Grass](https://github.com/DanielGrass/CategorifAI_MELI_Daniel_Grass/blob/main/README.md), que ofrece una visi√≥n general del proyecto, instrucciones de instalaci√≥n y gu√≠a de uso, lo que refuerza la accesibilidad y facilita la replicaci√≥n del proyecto por otros usuarios.

            4. **Buenas Pr√°cticas de Versionado de C√≥digo**: El uso de Git y GitHub para el control de versiones asegura un seguimiento detallado de los cambios, facilitando la colaboraci√≥n y manteniendo un historial limpio y organizado del desarrollo del proyecto.

            5. **Estilo de C√≥digo Consistente**: Se sigue la convenci√≥n de estilo PEP 8 de Python, lo que garantiza un c√≥digo limpio, legible y profesional. Esto incluye la consistencia en la indentaci√≥n, el uso adecuado de espacios, nombres de variables descriptivos y un enfoque general que favorece la mantenibilidad.

            """
        )

    elif st.session_state.selected_main == "Bonus":
        st.header("Tareas requeridas")
        st.write("**`Manejo de Environment de Desarrollo`**: Manejo de environment de desarrollo mediante alguna tecnolog√≠a (e.g. Docker, virtualenv, conda).")
        st.write("**`Identificar Nuevos Atributos`**: Identificar nuevos atributos / tablas que podr√≠an ser relevantes o necesarias para un mejor an√°lisis.")
       