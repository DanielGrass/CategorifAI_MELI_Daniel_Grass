import streamlit as st
from modules.theme_toggle import initialize_theme, toggle_theme, apply_styles
from modules.description_dataset import description_dataset, null_analysis, plot_categorical_distribution_with_pareto
from data.data_loader import load_local_parquet
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from fitter import Fitter, get_common_distributions

# Inicializar el estado del tema
initialize_theme()

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="CategorifAI", page_icon=":bar_chart:", layout="wide")

# Aplicar los estilos seg√∫n el modo seleccionado
apply_styles()

# URL del logo
logo_url = "https://http2.mlstatic.com/frontend-assets/ml-web-navigation/ui-navigation/6.6.73/mercadolibre/logo_large_25years@2x.png?width=300"

# Variables para la selecci√≥n de secciones
if 'selected_main' not in st.session_state:
    st.session_state.selected_main = None
    
# Barra lateral con el logo y men√∫
with st.sidebar:
    st.image(logo_url, use_column_width=True)  # Muestra el logo desde la URL
    st.title("Men√∫ Principal")
      
    # Bot√≥n para cambiar entre modo claro y oscuro con √≠conos de sol y luna
    theme_button = "üåô" if not st.session_state.dark_mode else "‚òÄÔ∏è"
    st.button(theme_button, on_click=toggle_theme)

    # Botones principales para secciones
    if st.button("Requerido"):
        st.session_state.selected_main = "Requerido"

    if st.button("Deseable"):
        st.session_state.selected_main = "Deseable"

    if st.button("Bonus"):
        st.session_state.selected_main = "Bonus"

# Men√∫ horizontal a la derecha basado en la selecci√≥n
st.title("Data Science Technical Challenge - CategorifAI")
st.subheader("Presentado por: Daniel Grass")

# Cargael archivo .parquet usando la funci√≥n cacheada
df = load_local_parquet()


if st.session_state.selected_main:
    # Mostrar un men√∫ horizontal seg√∫n la selecci√≥n del bot√≥n principal
    if st.session_state.selected_main == "Requerido":
        st.header("Tareas requeridas")
        st.write("**`Data QA`**: Se debe chequear la calidad del dataset para hacer una evaluaci√≥n de qu√© tan apropiados son los datos para tareas de Data Science. Proponga un conjunto de correcciones en los datos de ser necesario.")
        st.write("**`Reporting`**: Documente los resultados e insights obtenidos durante la exploraci√≥n y describa conclusiones desde una perspectiva de negocio, soportado por gr√°ficos / tablas / m√©tricas.")
        st.write("**`Machine Learning`**: Describa las posibles tareas de Machine Learning que podr√≠an realizarse desde el dataset dado, que podr√≠an ser valiosas en el dominio dado (s√≥lo explicar, **no entrenar un modelo**)")
        
       

        # Mostrar la Descripci√≥n de las Columnas del Dataset
        st.header("Descripci√≥n de las Columnas del Dataset")
        description_dataset()

        st.header("1. Imprimir los datos originales del archivo Parquet proporcionado.")
        if df is not None:
            st.write(df)  # Muestra el DataFrame en Streamlit

        
        # An√°lisis de tipos de datos y valores nulos
        st.header("2. An√°lisis de tipos de datos y valores nulos")        
        null_analysis(df)

        # An√°lisis Categ√≥rico:
        st.header("3. An√°lisis Categ√≥rico:")
        
        # An√°lisis de la columna `category`
        st.subheader("Distribuci√≥n de `category`")
        plot_categorical_distribution_with_pareto('category', df, color='skyblue')

        # An√°lisis de la columna `city`
        st.subheader("Distribuci√≥n de `city`")
        plot_categorical_distribution_with_pareto('city', df, color='orange')

        # An√°lisis de la columna `device`
        st.subheader("Distribuci√≥n de `device`")
        plot_categorical_distribution_with_pareto('device', df, color='purple')

        # An√°lisis de la columna `transaction_details`
        st.subheader("Distribuci√≥n de `account_id`")
        plot_categorical_distribution_with_pareto('account_id', df, color='pink')
       
        st.subheader("Conclusiones del An√°lisis Categ√≥rico:")
        conclusiones_categorico = """       

        1. **Distribuci√≥n de `Category`**:
        - El an√°lisis de la variable `Category` revela que una gran mayor√≠a de las transacciones (96.53%) se concentran en solo cuatro categor√≠as: **Miscellaneous**, **Transfer**, **Investment**, y **Subscriptions**. Esto sugiere que la actividad financiera de los usuarios est√° altamente centralizada en estas √°reas, lo que podr√≠a indicar patrones espec√≠ficos de uso o falta de diversificaci√≥n en las clasificaciones de las transacciones. Es crucial explorar estas categor√≠as m√°s a fondo para identificar si esta centralizaci√≥n responde a necesidades espec√≠ficas de los usuarios o si podr√≠a beneficiarse de una reclasificaci√≥n m√°s detallada.

        2. **Distribuci√≥n de `City` y `Device`**:
        - Las variables `City` y `Device` presentan una distribuci√≥n m√°s uniforme, donde cada categor√≠a muestra una participaci√≥n similar. Esto indica que no hay una fuerte dependencia de la transacci√≥n en funci√≥n de la ubicaci√≥n geogr√°fica o el tipo de dispositivo utilizado. Esta distribuci√≥n homog√©nea sugiere que las transacciones se distribuyen equitativamente entre las ciudades y los dispositivos, reflejando un comportamiento de usuario relativamente constante sin sesgos significativos hacia un tipo de dispositivo o una ciudad espec√≠fica. Este patr√≥n uniforme podr√≠a implicar que no hay una necesidad urgente de segmentar estrategias por ubicaci√≥n o tipo de dispositivo en este momento.
        
        3. **Distribuci√≥n de `account_id`**:
        -  Un peque√±o grupo de cuentas domina la mayor√≠a de las transacciones. Las primeras dos cuentas concentran una gran proporci√≥n de la actividad total (67.65%), sugiriendo usuarios muy activos. Esto ofrece una oportunidad para analizar el comportamiento de los usuarios, identificando patrones que podr√≠an guiar estrategias de segmentaci√≥n y retenci√≥n como modelos RFM.
        
        4. **Distribuci√≥n de `transaction_details`**:
        -  La variable transaction_details presenta una alta cardinalidad, lo que significa que contiene un gran n√∫mero de valores √∫nicos que dificulta su an√°lisis directo y la identificaci√≥n de patrones claros. se propone realizar una reclasificaci√≥n de transaction_details agrupando los registros por palabras clave o frases similares. Esto se puede lograr mediante t√©cnicas de procesamiento de lenguaje natural (NLP), como la identificaci√≥n de palabras clave, la eliminaci√≥n de stopwords, y el uso de algoritmos de similaridad textual como fuzzy matching o TF-IDF. Estas t√©cnicas permitir√°n agrupar transacciones en categor√≠as m√°s manejables y coherentes, como "pagos", "transferencias", "compras", entre otras, facilitando su an√°lisis.
        """

        # Mostrar el texto en Streamlit
        st.markdown(conclusiones_categorico)



        # Aseg√∫rate de que las columnas son datetime (aunque ya lo son, es una verificaci√≥n adicional)
        df['date'] = pd.to_datetime(df['date'], errors='coerce')
        df['value_date'] = pd.to_datetime(df['value_date'], errors='coerce')

        # Calcular la diferencia en segundos entre 'value_date' y 'date'
        df['time_difference_seconds'] = (df['value_date'] - df['date']).dt.total_seconds()

        # Mostrar el resultado
        st.write("Diferencia en segundos entre 'value_date' y 'date':")
        st.write(df[['date', 'value_date', 'time_difference_seconds']])
                     
       

    elif st.session_state.selected_main == "Deseable":
        menu_options = st.radio(
            "Opciones de Deseable",
            options=["Versionado de C√≥digo", "Feature Engineering", "Modelo Predictivo", "Mostrar Skills en Python", "Casos de Uso", "M√©tricas"],
            horizontal=True
        )

        # Mostrar el contenido correspondiente
        if menu_options == "Versionado de C√≥digo":
            st.header("Versionado de C√≥digo")
            st.write("Versionado de c√≥digo con Git (incluso puede publicarse en tu cuenta personal de GitHub).")

        elif menu_options == "Feature Engineering":
            st.header("Feature Engineering")
            st.write("Indicar y calcular posibles candidatos de features que podr√≠an utilizarse tanto columnas originales y transformaciones.")

        elif menu_options == "Modelo Predictivo":
            st.header("Modelo Predictivo")
            st.write("Realice un modelo predictivo.")

        elif menu_options == "Mostrar Skills en Python":
            st.header("Mostrar Skills en Python")
            st.write("Teniendo buenas pr√°cticas en la estructura del c√≥digo y la documentaci√≥n.")

        elif menu_options == "Casos de Uso":
            st.header("Casos de Uso")
            st.write("Describir posibles casos de uso a tratar con este dataset que podr√≠an agregar valor al negocio dado, indicando m√©todos, t√©cnicas, y algoritmos por cada uno de ellos, as√≠ como justificando las decisiones tomadas.")

        elif menu_options == "M√©tricas":
            st.header("M√©tricas")
            st.write("Definir y calcular las m√©tricas que considere m√°s relevantes para la problem√°tica propuesta.")

    elif st.session_state.selected_main == "Bonus":
        menu_options = st.radio(
            "Opciones de Bonus",
            options=["Manejo de Environment de Desarrollo", "Identificar Nuevos Atributos"],
            horizontal=True
        )

        # Mostrar el contenido correspondiente
        if menu_options == "Manejo de Environment de Desarrollo":
            st.header("Manejo de Environment de Desarrollo")
            st.write("Manejo de environment de desarrollo mediante alguna tecnolog√≠a (e.g. Docker, virtualenv, conda).")

        elif menu_options == "Identificar Nuevos Atributos":
            st.header("Identificar Nuevos Atributos")
            st.write("Identificar nuevos atributos / tablas que podr√≠an ser relevantes o necesarias para un mejor an√°lisis.")